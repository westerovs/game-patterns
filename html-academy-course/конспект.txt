-------------------------------------------------------------
----------- 1. Введение в паттерны проектирования -----------
-------------------------------------------------------------

ПРОЦЕДУРНОЕ ПРОГРАММИРОВАНИЕ
Процедурное программирование появилось первым. 
Оно базируется на выполнении пошаговых инструкций: команды исполняются друг за другом, сверху вниз, но иногда последовательность меняется.
Если программный код усложняется, применяются функции — методы.
Однако сейчас программы настолько сложны, что даже разделение на методы не может их упростить. Это основной недостаток процедурного программирования, а также причина появления других подходов в программировании.

ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ — ООП
В ООП программа представляет собой набор объектов, которые взаимодействуют друг с другом. 
При этом каждый из них обладает своими свойствами и поведением.

ФУНКЦИОНАЛЬНОЕ ПРОГРАММИРОВАНИЕ
В функциональном программировании особое внимание уделяется функциям, созданию структур и элементов компьютерных программ. 
Функциональная программа не работает, когда выполняются команды и операторы, так как она в большей степени оценивает выражения. 
Это позволяет отлично поддерживать процедурное программирование.

1.4
Объектно-ориентированные шаблоны описывают отношения, которые возникают при взаимодействии объектов и классов.

Шаблоны бывают:
  - порождающими
  - структурными
  - поведенческими

                                        ПОРОЖДАЮЩИЕ ШАБЛОНЫ 
это шаблоны проектирования, которые абстрагируют процесс, связанный с его инстанцированием. 
Они помогают правильно распределить обязанности между объектами. 
Они позволяют создать систему, которая не зависит от приёма представления, композиции или создания разных сущностей.
Шаблон, порождающий классы, применяет наследование. Это позволяет модифицировать класс-наследник. 
А шаблон, порождающий объекты, передаёт инстанцирование прочим объектам.

Список порождающих шаблонов:
  «Одиночка — Singleton.
  «Фабрика» — Factory;
  «Абстрактная фабрика» — Abstract factory;
  «Фабричный метод» — Factory method;
  «Строитель» — Builder;
  «Объектный пул» — Object pool;
  «Прототип» — Prototype;

                                              Структурные шаблоны 
это шаблоны проектирования, направленные на решение проблем при создании более крупных структур из классов и объектов.

Список структурных шаблонов проектирования:
  «Адаптер» — Adapter;
  «Мост» — Bridge;
  «Компоновщик» — Composite;
  «Декоратор» — Decorator;
  «Фасад» — Facade;
  «Приспособленец» — Flyweight;
  «Заместитель» — Proxy.

                                              ПОВЕДЕНЧЕСКИЕ ШАБЛОНЫ 
это шаблоны проектирования, которые определяют алгоритмы и способы реализации взаимодействия разных структур, объектов и классов.

Список поведенческих шаблонов:
  «Цепочка обязанностей» — Chain of Responsibility;
  «Команда» — Command;
  «Итератор» — Iterator;
  «Интерпретатор» — Interpreter;
  «Посредник» — Mediator;
  «Хранитель» — Memento;
  «Наблюдатель» — Observer;
  «Посетитель» — Visitor;
  «Стратегия» — Strategy;
  «Состояние» — State;
  «Шаблонный метод» — Template Method.

-------------------------------------------------------------
------------------ 2. ПОРОЖДАЮЩИЕ ПАТТЕРНЫ ------------------
-------------------------------------------------------------
2.1. Что такое порождающие паттерны?
Порождающие паттерны — это паттерны проектирования, которые затрагивают процесс создания объекта. Их основная задача — реализовывать независимые системы, на которые не влияют способ создания, композиция и представление объектов.

Такие паттерны нужны, когда программа в большей мере построена не на наследовании, а на композиции объектов. Здесь основной приоритет — не строгая разработка фиксированного набора разных функциональных блоков, а реализация небольшого набора функций, который благодаря композиции может генерировать любое количество более сложных функций. Для создания объектов с определённым поведением нужно нечто большее, чем стандартное инстанцирование класса.

Порождающие паттерны связаны друг с другом. Их нужно изучать одновременно, чтобы сходства и различия были более очевидны.

ПОРОЖДАЮЩИЕ ПАТТЕРНЫ ИСПОЛЬЗУЮТ, ЕСЛИ:
  - Нужно создать группу объектов, связанных друг с другом. 
    Например, группу товаров в интернет-магазине, у которых общая форма вывода товара на странице, но разная логика работы приложения при оформлении товара.
  - Нужно выводить информацию на странице приложения по общему шаблону, чтобы пользователю было проще её воспринимать.
  - Нужно хранить инициализированный объект в готовом состоянии для повторного использования и как следствие, экономии ресурсов системы при создании новых объектов. Например, полученные ответы запросов к серверу приложения — информацию о товарах и услугах интернет-магазина, которая хранится в базе данных.

ЧТО ДЕЛАЮТ ПОРОЖДАЮЩИЕ ПАТТЕРНЫ
  Порождающие паттерны инкапсулируют знания о конкретных классах, которые применяются в системе, то есть скрывают детали, как эти классы создаются и стыкуются. Единственная информация об объектах, известная системе, — их интерфейсы, определённые с помощью абстрактных классов. Следовательно, порождающие шаблоны дают большую гибкость при решении вопросов о том, что создаётся, кем, как и когда. Можно собрать систему из «готовых» объектов с самой разной структурой и функциональностью статически (на этапе компиляции) или динамически (во время выполнения).

КАКИЕ ПРОБЛЕМЫ РЕШАЮТ ПОРОЖДАЮЩИЕ ПАТТЕРНЫ
  Такие паттерны помогают, если у вас отсутствует связь между множеством экземпляров разных классов. 
  И как следствие, нарушена корректность информации, снизилась производительность программы и увеличилась стоимость поддержки и развития ПО.

---------------------
 2.2. «Одиночка»    |
Паттерн «Одиночка» — Его суть проста: класс должен гарантированно иметь только один объект в глобальной области видимости. 
«Одиночка» нужен для гарантированного создания исключительно одного объекта класса.

Что делает «Одиночка»
«Одиночка» позволяет сохранять в коде только один экземпляр класса. За счёт этого атрибуты внутри сохраняют своё значение при инициализации на других страницах приложения. Благодаря этому мы и создали счётчик.

Когда использовать «Одиночку»
«Одиночка» — лучший способ управления общими данными без использования Redux. С его помощью можно значительно упростить разработку. В больших командах разработчики не всегда имеют возможность редактировать глобальное хранилище, либо это занимает очень много времени.


------------------------
2.6. «Фабричный метод» |
«Фабричный метод» — это обычная функция, возвращающая объект. Шаблон удобен за счёт того, что вам не нужен дополнительный метод инициализации объекта.

Когда нужен паттерн:
Паттерн используется, когда класс заранее не знает, какие именно объекты создавать. 
Чтобы появились объекты, реализующие аналогичный интерфейс, нужно сделать метод (функцию) виртуальным и переопределить его в дочерних классах.
Что делает паттерн:
«Фабричный метод» позволяет реализовать единый класс, при обращении к которому можно получить несколько разных реализаций (объектов).
-----------------------------
2.10. «Абстрактная фабрика» |
«Абстрактная фабрика» — это интерфейс, который группирует внутри себя остальные логически связанные фабрики.
«Абстрактная фабрика» инкапсулирует внутри себя один или несколько «Фабричных методов», каждый из которых реализует свою фабрику.

Когда нужен паттерн:
Паттерн используют, когда нужно создать объекты, реализующие тот же интерфейс или те же объекты, но другим способом, в наследуемых классах. 
В этом случае метод становится виртуальным и переопределяется в дочерних классах.
Что делает паттерн:
В «Абстрактной фабрике» отсутствует собственная логика.
Методы фабрики возвращают экземпляры прочих интерфейсов, а также инициализируются внешними компонентами. 
«Абстрактная фабрика» позволяет при изменении реализации одного интерфейса менять реализацию других интерфейсов.


---------------------
 2.14 «Строитель»   |

«Строитель» — это шаблон проектирования, который инкапсулирует создание объекта и позволяет разделить его на разные этапы.

Что делает паттерн
Паттерн «Строитель» позволяет собирать объекты пошагово, вызывая только те шаги, которые вам нужны. А значит, больше не нужно добавлять в конструктор все возможные опции продукта, когда код должен создавать разные представления какого-то объекта. Например, деревянные и железобетонные дома.

В каких ситуациях нужен паттерн:
Когда процесс создания нового объекта не должен зависеть от того, из каких частей этот объект состоит и как эти части связаны между собой.
Когда нужно получать разные вариации объекта в процессе его создания.


---------------------
2.18. «Пул объектов»
(в htmlacademy) отстойный пример, не стал повторять

«Объектный пул» — это набор объектов, которые хранятся в состоянии полной готовности к использованию. Когда в коде нужен новый подобный объект, используется один из хранящихся в пуле. При этом новый объект, использующий динамическую память системы, не создаётся.

В каких ситуациях необходим паттерн
- Когда нужно регулярно создавать и удалять объекты.
- Когда все объекты одного размера.
- Когда получение объектов происходит медленно или может спровоцировать дробление памяти.
- Когда все объекты инкапсулируют разные ресурсы, к примеру, сетевое соединение, которое сложно получать и можно вызывать повторно.

Самый элементарный пример object pool когда допустим в игре используешь автомат из него постоянно генерируются патроны при стрельбе и затем после столкновения с объектом уничтожаются
Этот патерн очень полезен в играх, когда тебе нужно создавать сложные объекты в сцене, которые так же уничтожаются. Типа игра про машинки ты появляешься едешь тебя разбивают и что бы не создавать разрушенную машинку мы берём её из пула, и тебя же после смерти, твою целую тачку, суём в пул пока ты не не нажмёшь кнопку продолжить




























---------------------------------
----------- Разное --------------
Поведенческие паттерны нужны для эффективного и безопасного взаимодействия между объектами программы. 
Структурные отвечают за построение иерархий классов, которые удобно поддерживать. 
Порождающие помогают гибко создавать объекты без добавления в программу лишних зависимостей. 


- Процедурное программирование повышает безопасность небольших информационных систем. 
- Объектно-ориентированное программирование, или ООП, помогает сократить код, увеличить скорость разработки и упростить расширение программных продуктов. 
- Функциональное программирование тоже снижает количество кода. Оно способно дополнять как структурное, так и объектно-ориентированное программирование, упрощает использование функций и повышает скорость разработки









